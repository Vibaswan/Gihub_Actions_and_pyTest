# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches:
      main
  repository_dispatch:
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy_and_test:
    # The type of runner that the job will run on
    runs-on: [self-hosted, windows, x64]
    strategy:
      matrix:
        python-version: [27, 38]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # checking out my code
      - name: Checkout
        uses: actions/checkout@v2

      # basically just getting the version number for which the build got triggered
      - name: Get version number
        id: get_version
        run: echo "::set-output name=version::$(cat VERSION)"

      # setting up python for the project
      #- name: Set up Python
      #  uses: actions/setup-python@v2
      #  with:
      #    python-version: '3.x'

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # setting python path
      - name: set python path
        id: path
        run: echo "::set-output name=pythonv::c:/${{matrix.python-version}}/python"

      # Installing some dependencies
      - name: Install dependencies
        run: |
          ${{steps.path.outputs.pythonv}} -m pip install --upgrade pip
          ${{steps.path.outputs.pythonv}} -m pip install pytest
          ${{steps.path.outputs.pythonv}} -m pip install requests
          ${{steps.path.outputs.pythonv}} -m pip install pyaml
          ${{steps.path.outputs.pythonv}} -m pip install pandas
          ${{steps.path.outputs.pythonv}} -m pip install dpkt
          ${{steps.path.outputs.pythonv}} -m pip install jsonpath-ng
          ${{steps.path.outputs.pythonv}} -m pip install abstract-open-traffic-generator
          ${{steps.path.outputs.pythonv}} -m pip install ixnetwork-restpy
          ${{steps.path.outputs.pythonv}} -m pip install scapy

      # Running the pytest for testing code
      - name: running the unit test
        run: ${{steps.path.outputs.pythonv}} -m pytest -s -v tests --disable-warnings

      # checking which files changed
      - name: check which files changed
        if: github.event_name != 'repository_dispatch' && github.event_name != 'pull_request'
        uses: jitterbit/get-changed-files@v1
        id: change
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}

      # regex matching for to see version got changed or not
      - name: Find if version file has changes
        if: github.event_name != 'repository_dispatch' && github.event_name != 'pull_request'
        id: regex
        uses: AsasInnab/regex-action@v1
        with:
          regex_pattern: 'VERSION'
          regex_flags: 'gim'
          search_string: ${{ steps.change.outputs.modified }}

      # updating the release
      - name: Create Release
        if: steps.regex.outputs.first_match == 'VERSION' && github.event_name != 'repository_dispatch' && github.event_name != 'pull_request'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-python_${{matrix.python-version}}
          release_name: Release ${{ steps.get_version.outputs.version }}-python_${{matrix.python-version}}
          draft: false
          prerelease: false
